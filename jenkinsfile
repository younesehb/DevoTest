#!/usr/bin/env groovy

pipeline {
    agent any
    
       tools {
        maven 'maven_3_6_0'
       
    }
    stages {
        stage('Cancel previous builds') {
            steps {
             abortPreviousRunningBuilds()
        }
    }

          stage('Checkout from git') {
              steps {
            git branch: 'master',
                url: 'https://github.com/younesehb/DevoTest.git'

            sh "ls -lat"
        }
    }
        stage ('Clean compile') {
            steps{
                    sh 'mvn clean compile'
                
            }
            
        }
        
        stage ('Testing') {
            steps {
             
                    sh 'mvn test'
                
            }        
        }
         stage ('Packaging Stage') {
            steps {
               
                    sh 'mvn package'
                   
                
            }   
        }
        stage (' Running Stage') {
            steps {
               
              
                    sh 'java -jar target/demo-0.0.1-SNAPSHOT.jar'
                
            }   
        }
    }
    
    
}

def abortPreviousRunningBuilds() {
  def hi = Hudson.instance
  def pname = env.JOB_NAME.split('/')[0]

  hi.getItem(pname).getItem(env.JOB_BASE_NAME).getBuilds().each{ build ->
    def exec = build.getExecutor()

    if (build.number != currentBuild.number && exec != null) {
      exec.interrupt(
        Result.ABORTED,
        new CauseOfInterruption.UserInterruption(
          "Aborted by #${currentBuild.number}"
        )
      )
      println("Aborted previous running build #${build.number}")
    } else {
      println("Build is not running or is current build, not aborting - #${build.number}")
    }
  }
}
